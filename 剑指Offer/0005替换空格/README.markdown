### leedcode 剑指 Offer 05. 替换空格

这里有两种不同的解决方法，都用于解决将字符串中的空格替换为"%20"的问题。

#### 第一种算法（新字符串）

- **思想**: 这个算法使用了一个新的字符串 `res` 来存储结果。
- **步骤**:
  1. 初始化一个空的结果字符串 `res`。
  2. 遍历输入字符串`s`的每个字符。
  3. 如果当前字符是空格，就在`res`中添加"%20"。
  4. 如果当前字符不是空格，就将其添加到`res`中。
- **时间复杂度**: O(n)，其中n是输入字符串的长度。
- **空间复杂度**: O(n)，因为创建了一个新的字符串来存储结果。

#### 第二种算法（就地替换）

- **思想**: 这个算法在原始字符串上进行就地修改。
- **步骤**:
  1. 计算原始字符串`s`中的空格数量。
  2. 根据空格数量，重新调整原始字符串的大小。
  3. 使用两个指针（`readPtr`和`writePtr`）从字符串的末尾开始，进行替换操作。
  4. 如果碰到空格，就用"%20"替换；否则，将原字符放到新位置。
- **时间复杂度**: O(n)，其中n是输入字符串的长度。
- **空间复杂度**: O(1)，没有使用额外的存储空间。

### 总结

1. 第一种算法适用于不允许修改原始字符串或要保留原始字符串的情况。但这会消耗更多的内存，因为它需要创建一个新的字符串来存储结果。
2. 第二种算法在原地进行操作，节省了空间，但需要事先知道有多少个空格，以便正确地调整字符串的大小。
3. 第二种算法通过先计算空格数，再一次性调整字符串大小，避免了多次动态调整大小，从而提高了效率。
4. 在选择算法时，应考虑是否允许修改原始数据、是否有额外空间可用以及是否需要最大限度地减少内存使用。

这两种方法各有优缺点，具体使用哪一种取决于你的具体需求和限制。