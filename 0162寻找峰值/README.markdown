# Leetcode162 寻找峰值


1. **基本原理**：
   本题解决方案是基于二分搜索算法。问题的要点是找到一个索引`i`使得`nums[i] > nums[i+1]`。由于题目保证了“峰值”元素的存在，并且数组两侧可以认为是负无穷，并且数组中相邻的数都不相等，因此可以使用二分搜索在`O(log n)`的时间复杂度内找到峰值。在每一步，我们比较中间元素`mid`和它的右邻居`mid+1`，如果`mid`元素较大，那么左侧必定存在峰值；如果`mid+1`元素较大，则右侧必定存在峰值。这样，我们逐步缩小搜索范围，直至找到峰值。

2. **难点**：
   实现过程中的难点包括：
   - 确定正确的比较逻辑，以便能够正确移动搜索范围。
   - 处理数组的边界条件，以防止索引越界。
   - 理解为什么这个二分搜索算法可以适用于寻找峰值，即使数组未排序，这与标准二分搜索寻找特定值的情况不同。

3. **边界情况处理**：
   - 当数组长度为1时，那个单一元素即是峰值。
   - 对于数组长度大于1的情况，由于题目说明数组`nums[-1]`和`nums[n]`可以认为是负无穷，实际上我们在考虑边界元素时，默认它们的外部元素都足够小，这就保证了至少存在一个峰值。

4. **启示**：
   - 二分搜索算法不仅可以用于排序数组的精确查找，还可以用于这类优化问题，其关键在于每一步都能排除一部分搜索空间。
   - 问题的特定性质允许我们在未完全排序的数组中应用二分搜索。
   - 这种问题表明，对于局部最优化问题，可以通过局部决策来得出全局结果。

5. **时间和空间复杂度**：
   - 时间复杂度：`O(log n)`。二分搜索的每一步都将搜索范围减半，因此时间复杂度为对数级。
   - 空间复杂度：`O(1)`。该算法仅使用了常数个额外空间，即几个用于标记索引和进行计算的变量。